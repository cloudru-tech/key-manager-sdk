// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: sckm.spec.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeyManagerService_CreateCryptoKey_FullMethodName               = "/sbercloud.keymanager.v1.KeyManagerService/CreateCryptoKey"
	KeyManagerService_CreateCryptoKeyVersion_FullMethodName        = "/sbercloud.keymanager.v1.KeyManagerService/CreateCryptoKeyVersion"
	KeyManagerService_GenerateDataKey_FullMethodName               = "/sbercloud.keymanager.v1.KeyManagerService/GenerateDataKey"
	KeyManagerService_GetCryptoKey_FullMethodName                  = "/sbercloud.keymanager.v1.KeyManagerService/GetCryptoKey"
	KeyManagerService_GetCryptoKeyVersion_FullMethodName           = "/sbercloud.keymanager.v1.KeyManagerService/GetCryptoKeyVersion"
	KeyManagerService_ListCryptoKeys_FullMethodName                = "/sbercloud.keymanager.v1.KeyManagerService/ListCryptoKeys"
	KeyManagerService_ListCryptoKeyVersions_FullMethodName         = "/sbercloud.keymanager.v1.KeyManagerService/ListCryptoKeyVersions"
	KeyManagerService_UpdateCryptoKey_FullMethodName               = "/sbercloud.keymanager.v1.KeyManagerService/UpdateCryptoKey"
	KeyManagerService_UpdateCryptoKeyPrimaryVersion_FullMethodName = "/sbercloud.keymanager.v1.KeyManagerService/UpdateCryptoKeyPrimaryVersion"
	KeyManagerService_EnableCryptoKeyVersion_FullMethodName        = "/sbercloud.keymanager.v1.KeyManagerService/EnableCryptoKeyVersion"
	KeyManagerService_DisableCryptoKeyVersion_FullMethodName       = "/sbercloud.keymanager.v1.KeyManagerService/DisableCryptoKeyVersion"
	KeyManagerService_DestroyCryptoKey_FullMethodName              = "/sbercloud.keymanager.v1.KeyManagerService/DestroyCryptoKey"
	KeyManagerService_DestroyCryptoKeyVersion_FullMethodName       = "/sbercloud.keymanager.v1.KeyManagerService/DestroyCryptoKeyVersion"
	KeyManagerService_RestoreCryptoKeyVersion_FullMethodName       = "/sbercloud.keymanager.v1.KeyManagerService/RestoreCryptoKeyVersion"
	KeyManagerService_Encrypt_FullMethodName                       = "/sbercloud.keymanager.v1.KeyManagerService/Encrypt"
	KeyManagerService_Decrypt_FullMethodName                       = "/sbercloud.keymanager.v1.KeyManagerService/Decrypt"
)

// KeyManagerServiceClient is the client API for KeyManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyManagerServiceClient interface {
	CreateCryptoKey(ctx context.Context, in *CreateCryptoKeyRequest, opts ...grpc.CallOption) (*CryptoKey, error)
	CreateCryptoKeyVersion(ctx context.Context, in *CreateCryptoKeyVersionRequest, opts ...grpc.CallOption) (*CryptoKeyVersion, error)
	GenerateDataKey(ctx context.Context, in *GenerateDataKeyRequest, opts ...grpc.CallOption) (*GenerateDataKeyResponse, error)
	GetCryptoKey(ctx context.Context, in *GetCryptoKeyRequest, opts ...grpc.CallOption) (*CryptoKey, error)
	GetCryptoKeyVersion(ctx context.Context, in *GetCryptoKeyVersionRequest, opts ...grpc.CallOption) (*CryptoKeyVersion, error)
	ListCryptoKeys(ctx context.Context, in *ListCryptoKeysRequest, opts ...grpc.CallOption) (*ListCryptoKeysResponse, error)
	ListCryptoKeyVersions(ctx context.Context, in *ListCryptoKeyVersionsRequest, opts ...grpc.CallOption) (*ListCryptoKeyVersionsResponse, error)
	UpdateCryptoKey(ctx context.Context, in *UpdateCryptoKeyRequest, opts ...grpc.CallOption) (*CryptoKey, error)
	UpdateCryptoKeyPrimaryVersion(ctx context.Context, in *UpdateCryptoKeyPrimaryVersionRequest, opts ...grpc.CallOption) (*CryptoKey, error)
	EnableCryptoKeyVersion(ctx context.Context, in *EnableCryptoKeyVersionRequest, opts ...grpc.CallOption) (*CryptoKeyVersion, error)
	DisableCryptoKeyVersion(ctx context.Context, in *DisableCryptoKeyVersionRequest, opts ...grpc.CallOption) (*CryptoKeyVersion, error)
	DestroyCryptoKey(ctx context.Context, in *DestroyCryptoKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyCryptoKeyVersion(ctx context.Context, in *DestroyCryptoKeyVersionRequest, opts ...grpc.CallOption) (*CryptoKeyVersion, error)
	RestoreCryptoKeyVersion(ctx context.Context, in *RestoreCryptoKeyVersionRequest, opts ...grpc.CallOption) (*CryptoKeyVersion, error)
	Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptResponse, error)
	Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptResponse, error)
}

type keyManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyManagerServiceClient(cc grpc.ClientConnInterface) KeyManagerServiceClient {
	return &keyManagerServiceClient{cc}
}

func (c *keyManagerServiceClient) CreateCryptoKey(ctx context.Context, in *CreateCryptoKeyRequest, opts ...grpc.CallOption) (*CryptoKey, error) {
	out := new(CryptoKey)
	err := c.cc.Invoke(ctx, KeyManagerService_CreateCryptoKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerServiceClient) CreateCryptoKeyVersion(ctx context.Context, in *CreateCryptoKeyVersionRequest, opts ...grpc.CallOption) (*CryptoKeyVersion, error) {
	out := new(CryptoKeyVersion)
	err := c.cc.Invoke(ctx, KeyManagerService_CreateCryptoKeyVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerServiceClient) GenerateDataKey(ctx context.Context, in *GenerateDataKeyRequest, opts ...grpc.CallOption) (*GenerateDataKeyResponse, error) {
	out := new(GenerateDataKeyResponse)
	err := c.cc.Invoke(ctx, KeyManagerService_GenerateDataKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerServiceClient) GetCryptoKey(ctx context.Context, in *GetCryptoKeyRequest, opts ...grpc.CallOption) (*CryptoKey, error) {
	out := new(CryptoKey)
	err := c.cc.Invoke(ctx, KeyManagerService_GetCryptoKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerServiceClient) GetCryptoKeyVersion(ctx context.Context, in *GetCryptoKeyVersionRequest, opts ...grpc.CallOption) (*CryptoKeyVersion, error) {
	out := new(CryptoKeyVersion)
	err := c.cc.Invoke(ctx, KeyManagerService_GetCryptoKeyVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerServiceClient) ListCryptoKeys(ctx context.Context, in *ListCryptoKeysRequest, opts ...grpc.CallOption) (*ListCryptoKeysResponse, error) {
	out := new(ListCryptoKeysResponse)
	err := c.cc.Invoke(ctx, KeyManagerService_ListCryptoKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerServiceClient) ListCryptoKeyVersions(ctx context.Context, in *ListCryptoKeyVersionsRequest, opts ...grpc.CallOption) (*ListCryptoKeyVersionsResponse, error) {
	out := new(ListCryptoKeyVersionsResponse)
	err := c.cc.Invoke(ctx, KeyManagerService_ListCryptoKeyVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerServiceClient) UpdateCryptoKey(ctx context.Context, in *UpdateCryptoKeyRequest, opts ...grpc.CallOption) (*CryptoKey, error) {
	out := new(CryptoKey)
	err := c.cc.Invoke(ctx, KeyManagerService_UpdateCryptoKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerServiceClient) UpdateCryptoKeyPrimaryVersion(ctx context.Context, in *UpdateCryptoKeyPrimaryVersionRequest, opts ...grpc.CallOption) (*CryptoKey, error) {
	out := new(CryptoKey)
	err := c.cc.Invoke(ctx, KeyManagerService_UpdateCryptoKeyPrimaryVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerServiceClient) EnableCryptoKeyVersion(ctx context.Context, in *EnableCryptoKeyVersionRequest, opts ...grpc.CallOption) (*CryptoKeyVersion, error) {
	out := new(CryptoKeyVersion)
	err := c.cc.Invoke(ctx, KeyManagerService_EnableCryptoKeyVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerServiceClient) DisableCryptoKeyVersion(ctx context.Context, in *DisableCryptoKeyVersionRequest, opts ...grpc.CallOption) (*CryptoKeyVersion, error) {
	out := new(CryptoKeyVersion)
	err := c.cc.Invoke(ctx, KeyManagerService_DisableCryptoKeyVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerServiceClient) DestroyCryptoKey(ctx context.Context, in *DestroyCryptoKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KeyManagerService_DestroyCryptoKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerServiceClient) DestroyCryptoKeyVersion(ctx context.Context, in *DestroyCryptoKeyVersionRequest, opts ...grpc.CallOption) (*CryptoKeyVersion, error) {
	out := new(CryptoKeyVersion)
	err := c.cc.Invoke(ctx, KeyManagerService_DestroyCryptoKeyVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerServiceClient) RestoreCryptoKeyVersion(ctx context.Context, in *RestoreCryptoKeyVersionRequest, opts ...grpc.CallOption) (*CryptoKeyVersion, error) {
	out := new(CryptoKeyVersion)
	err := c.cc.Invoke(ctx, KeyManagerService_RestoreCryptoKeyVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerServiceClient) Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptResponse, error) {
	out := new(EncryptResponse)
	err := c.cc.Invoke(ctx, KeyManagerService_Encrypt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerServiceClient) Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptResponse, error) {
	out := new(DecryptResponse)
	err := c.cc.Invoke(ctx, KeyManagerService_Decrypt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
